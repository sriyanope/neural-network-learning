# -*- coding: utf-8 -*-
"""simple_neural_network.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Js8SMwHruCXIumqGt1Vbz5tSc12R_PSM

# Creating a neural network that classifies flowers through images
"""

import torch
import torch.nn as nn
import torch.nn.functional as F

# Create a model class that inherits nn.Module
class Model(nn.Module):
  # input layer (4 features of the flower) -->
  # Hidden Layer1 (number of neurons) -->
  # H2 (n) -->
  # output (3 classess of iris flowers)
  def __init__(self, in_features=4, h1=8, h2=9, out_features=3):
    super().__init__() # instantiate our nn.Module
    self.fc1 = nn.Linear(in_features, h1)
    self.fc2 = nn.Linear(h1, h2) # the hidden layer
    self.out = nn.Linear(h2, out_features) #the hidden layers

  def forward(self, x):
    x = F.relu(self.fc1(x)) # rectified linear unit
    x = F.relu(self.fc2(x))
    x = self.out(x)

    return x

# to switch the model on, we will need to use a seed?

# Pick a manual seed for randomization
torch.manual_seed(41)

# create an instance of the model
model = Model()

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

url = 'https://gist.githubusercontent.com/netj/8836201/raw/6f9306ad21398ea43cba4f7d537619d0e07d5ae3/iris.csv'
my_df = pd.read_csv(url)

my_df

my_df.head()

my_df.tail()

# Change last col from str to int

my_df['variety'] = my_df['variety'].replace('Setosa', 0.0)
my_df['variety'] = my_df['variety'].replace('Versicolor', 1.0)
my_df['variety'] = my_df['variety'].replace('Virginica', 2.0)
my_df

# Train test split! set x,y

X = my_df.drop('variety', axis=1) #purpose for dropping: x is the feature, y is the variety
y = my_df['variety']

# Convert these to numpy arrays
X = X.values
y = y.values

X

from sklearn.model_selection import train_test_split

# Train test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=41)

# Convert X feature into float tensors
X_train = torch.FloatTensor(X_train)
X_test = torch.FloatTensor(X_test)

# Convert y labels to tensors long

y_train = torch.LongTensor(y_train)
y_test = torch.LongTensor(y_test)

# Set the criterion of model to measure the error, how far off the predictions are from
criterion = nn.CrossEntropyLoss()

# Choose adam optimiser lr = learning rate (if error does not go down after a bunch of iterations (epochs), lr will be reduced)
optimizer = torch.optim.Adam(model.parameters(), lr=0.01) # the lower the lr, the longer it is going to take to train the model (diff can be seen with large dataset > 1000000 lines)

model.parameters

# time to train the model!
# epochs (one run through all the training data in our network)

epochs = 100
losses = []
for i in range(epochs):
  # go fwd and get a prediction
  y_pred = model.forward(X_train) # get the predicted result

  # measure the loss/error, gonna be high at first
  loss = criterion(y_pred, y_train) # predicted values vs the y_train

  # keep track of our lossess
  losses.append(loss.detach().numpy())

  # print every 10 epochs
  if i % 10 == 0:
    print(f'Epoch: {i} and loss: {loss}')

  # do some back propogation: take the error rate of forward propogation and feed it back
  # through the network to fine tune the weights
  optimizer.zero_grad()
  loss.backward()
  optimizer.step()

# graph it out
plt.plot(range(epochs), losses)
plt.ylabel("loss/error")
plt.xlabel("epoch")

# Evaluate model on test data set (validate model on test set)
with torch.no_grad(): # basically turns off back propogation - no weights
  y_eval = model.forward(X_test) # X_test are features from our test set, y_eval will be predictions
  loss = criterion(y_eval, y_test) # find the loss or error

loss # we want to take this number and evaluate it against teh highest interval loss (90 if the epoch is 100) - both need to be approx the same

correct = 0
with torch.no_grad():
  for i, data in enumerate(X_test):
    y_val = model.forward(data)

    if y_test[i] == 0:
      x = "Setosa"
    elif y_test[i] == 1:
      x = 'Versicolor'
    else:
      x = "Virginica"


    # will tell us what type of flower class our network thinks it is - need to convert the tensor to a str
    print(f"{i + 1}.) {str(y_val)} \t {y_test[i]} \t {y_val.argmax().item()}")

    #Correct or not
    if y_val.argmax().item() == y_test[i]: # this tell us what the test actually is
      correct +=1
print(f'We got {correct} correct!')

new_iris = torch.tensor([4.7, 3.2, 1.3, 0.2])

with torch.no_grad():
  print(model(new_iris))

newer_iris = torch.tensor([5.9, 3.0, 5.1, 1.8])

# saving our NN model

torch.save(model.state_dict(), 'my_first_NN_model.pt') # saves the weight adn biases for the model that we have trained into a dictionary

# load the saved model
new_model = Model()

new_model.load_state_dict(torch.load('my_first_NN_model.pt'))

new_model.eval()